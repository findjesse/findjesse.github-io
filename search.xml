<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SQL必知必会(第4版)</title>
      <link href="2020/12/07/mysql_guide/"/>
      <url>2020/12/07/mysql_guide/</url>
      
        <content type="html"><![CDATA[<div class="note success flat"><p>文章中的指令可直接执行以查看结果，基础表数据链接在文章末尾可以自行下载，文中大多数指令多适用于MYSQL，如部分无法使用请参考相关DBMS文档。</p></div>  <hr><h2 id="指令一栏"><a href="#指令一栏" class="headerlink" title="指令一栏"></a>指令一栏</h2><table><thead><tr><th align="left">作用</th><th align="left">指令</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">检索</td><td align="left">SELECT * FROM *</td><td align="left">DISTINCT去重</td></tr><tr><td align="left">排序</td><td align="left">ORDER BY</td><td align="left">DESC降序</td></tr><tr><td align="left">过滤</td><td align="left">WHERE</td><td align="left">AND OR IN NOT操作符</td></tr><tr><td align="left">通配符</td><td align="left">% _ [ ]</td><td align="left">LIKE子句</td></tr><tr><td align="left">拼接</td><td align="left">+ ||</td><td align="left"></td></tr><tr><td align="left">别名</td><td align="left">AS</td><td align="left"></td></tr><tr><td align="left">分组</td><td align="left">GROUP BY</td><td align="left">HAVING子句过滤分组</td></tr><tr><td align="left">联结</td><td align="left">* JOIN * ON *</td><td align="left">内联INNER 外联(LEFT/RIGHT)OUTER</td></tr><tr><td align="left">组合查询</td><td align="left">UNION</td><td align="left">ALL不去重</td></tr><tr><td align="left">插入数据</td><td align="left">INSERT INTO</td><td align="left">如果直接复制表使用INSERT SELECT</td></tr><tr><td align="left">更新/删除数据</td><td align="left">UPDATE/DELETE</td><td align="left">应使用WHERE和外键限定范围</td></tr><tr><td align="left">创建/更新/删除表</td><td align="left">CREATE/ALTER/DROP TABLE</td><td align="left"></td></tr><tr><td align="left">创建视图</td><td align="left">CREATE VIEW</td><td align="left"></td></tr><tr><td align="left">创建储存过程</td><td align="left">CREATE PROCEDURE</td><td align="left">各DBMS中语法不同</td></tr><tr><td align="left">使用储存过程</td><td align="left">EXECUTE *</td><td align="left">各DBMS中语法不同</td></tr><tr><td align="left">创建管理事务</td><td align="left">START TRANSACTION</td><td align="left">各DBMS中语法不同 撤销ROLLBACK 确认COMMIT 保留点SAVEPOINT</td></tr><tr><td align="left">创建游标</td><td align="left">DECLARE * CURSOR</td><td align="left"></td></tr><tr><td align="left">使用/关闭游标</td><td align="left">OPEN/CLOSE CURSOR *</td><td align="left"></td></tr></tbody></table><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ol><li><strong>数据库(database)</strong>:保存有组织的数据的容器（通常是一个文件或者一组文件）。     </li><li><strong>表(table)</strong>:某种特定类型数据的结构化清单。        </li><li><strong>模式(schema)</strong>:表具有一些特性来定义如何储存数据。     </li><li><strong>列(column)、行(row)</strong>:列为字段，用来限定种类；行是表中的一个记录。        </li><li><strong>数据类型(datatype)</strong>:定义列可以储存数据的种类。       </li><li><strong>主键(primary key)</strong>:一列或几列，其值用于唯一表示表内每一行，不得更新、修改和重用。        </li><li><strong>子句(clause)</strong>:有些为必须有些为可选，例如From。       </li><li><strong>操作符(operator)</strong>:链接WHERE子句的关键字，也称操作符(logic operator)。        </li><li><strong>通配符(wildcard)</strong>:用于匹配值的一部分特殊字符。       </li><li><strong>搜索模式(search pattern)</strong>:由字面值、通配符或组合构成的搜索条件。     </li><li><strong>谓词(predicate)</strong>:操作符又是可做谓词，例如LIKE。      </li><li><strong>字段(field)</strong>:基本与列意思相同，但在数据库中称列，在计算字段中称呼字段。      </li><li><strong>拼接(concatenate)</strong>:将值连接(附加)到一起构成的新值。      </li><li><strong>可移植(portable)</strong>:所编写的代码可以在多个系统上运行。     </li><li><strong>聚集函数(aggregate function)</strong>:对数据计算并返还值。       </li><li><strong>查询(query)</strong>:任何SQL语句都是查询。但一般指SELECT语句。       </li><li><strong>可伸缩(scale)</strong>:能适应不断增加的工作量而不失败。      </li><li><strong>笛卡尔积(cartesian product)</strong>:没有联结条件的表返回的结果。检索出的行的数目是第一个表行和第二个表行的乘积。也称为叉联结（croess join）</li><li><strong>事务(transaction)</strong>:一组SQL语句。</li><li><strong>回退(rollback)</strong>:撤销指定SQL语句。</li><li><strong>提交(commit)</strong>:将未储存的SQL语句结果写入数据库。</li><li><strong>保留点(savepoint)</strong>:事务处理中的临时占位符(placeholder)，可以对他发布回退。</li><li><strong>结果集(result set)</strong>:SQL查询所检索出的结果。</li><li><strong>游标(cursor)</strong>:是一个储存在DBMS服务器上的数据库查询。</li><li><strong>约束(constraint)</strong>:管理如何插入或处理数据库数据的规则。</li></ol><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><div class="note default flat"><p>SQL语句必须以分号<code>;</code>分隔且不区分大小写，在处理语句过程中所有空格均会被忽略，所以在书写时尽量保持美观。</p></div>       <div class="note warning flat"><p>SQL语句的实现并非都是一致的，基本语句往往容易移植，但复杂的语句就不一定了。</p></div><h3 id="数据检索"><a href="#数据检索" class="headerlink" title="数据检索"></a>数据检索</h3><ul><li><strong>检索单列</strong>：例如<code>SELECT prod_name FROM Products;</code>，在返回的数据中没有进行过滤（将得到结果集的一个子集），也没有排序。     </li><li><strong>检索多列</strong>：例如<code>SELECT prod_id,prod_name,prod_price FROM Products;</code>，区别就在于列名用逗号分隔。      </li><li><strong>检索所有列</strong>：例如<code>SELECT * FROM Products</code>，使用通配符<code>*</code>则返回表中的所有列，尽量不要使用以提高性能。     </li><li><strong>去重</strong>：用<em>DISTINCT</em>关键字，例如<code>SELECT </code> <em><code>DISTINCT</code></em> <code> ven_id FROM Products;</code>将其加在列名之前，并且会作用于所有的列。     </li><li><strong>限制字段数</strong>：使用<em>LIMIT</em>关键字，例如<code>SELECT prod_name FROM Products </code> <em><code>LIMIT 5</code></em> <code>;</code>来指定返回前5行数据（在使用MYSQL情况下），如果加上<code>OFFSET 1</code>则表示从<strong>第二行</strong>开始，因为检索的首行是从第0行开始的。</li><li><strong>注释</strong>：使用<code>--</code>之后的文本就是注释，或者使用<code>#</code>注释，也可以使用<code>/* XXX */</code>来将中间部分注释掉。       </li></ul><h3 id="数据检索排序"><a href="#数据检索排序" class="headerlink" title="数据检索排序"></a>数据检索排序</h3><ul><li><strong>排序单列</strong>：使用<em>ORDER BY</em>子句来对检索排序，但必须是<u>最后的子句</u>否则会报错。     </li><li><strong>排序多列</strong>：区别就在于列名用逗号分隔<u>且有先后顺序</u>，并且可以使用数字代替列。     <div class="note warning flat"><p>排序的顺序默认为升序ASC，如果要使用降序则在<strong>对应的</strong>列后加上<code>DESC</code>即可。</p></div></li></ul><h3 id="数据过滤"><a href="#数据过滤" class="headerlink" title="数据过滤"></a>数据过滤</h3><div class="note default flat"><p>数据也可以在应用层过滤，但会影响应用的性能并且浪费带宽。</p></div>       <ul><li><strong>使用WHERE子句</strong>：例如<code>SELECT prod_name,prod_price FROM Products </code> <em><code>WHERE</code></em> <code> prod_price = 3.49;</code>       </li><li><strong>WHERE操作符</strong>：<table><thead><tr><th align="left">操作符</th><th align="left">说明</th><th align="left">操作符</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">=</td><td align="left">等于</td><td align="left">&gt;</td><td align="left">大于</td></tr><tr><td align="left">&lt;&gt;</td><td align="left">不等于</td><td align="left">&gt;=</td><td align="left">大于等于</td></tr><tr><td align="left">!=</td><td align="left">不等于</td><td align="left">!&gt;</td><td align="left">不大于</td></tr><tr><td align="left">&lt;</td><td align="left">小于</td><td align="left">BETWEEN</td><td align="left">指定两值间(a AND b)</td></tr><tr><td align="left">&lt;=</td><td align="left">小于等于</td><td align="left">IS NULL</td><td align="left">为NULL值(与0和空格不同)</td></tr><tr><td align="left">!&lt;</td><td align="left">不小于</td><td align="left"></td><td align="left"></td></tr></tbody></table></li></ul><h3 id="高级数据过滤"><a href="#高级数据过滤" class="headerlink" title="高级数据过滤"></a>高级数据过滤</h3><ul><li><strong>AND操作符</strong>：用于WHERE子句关键字，逻辑与。        </li><li><strong>OR操作符</strong>：与AND用法相反，逻辑或。       <div class="note warning flat"><p>如果当AND和OR同时存在时，优先处理AND语句，可以且应该使用括号进行分组。</p></div>       </li><li><strong>IN操作符</strong>：例如<code>SELECT prod_name,prod_price FROM Products WHERE vend_id </code> <em><code>IN(&#39;DLL01&#39;,&#39;BRS01&#39;)</code></em> <code> ORDER BY prod_name;</code>，推荐使用IN语句来代替OR语句，这样能更直观且提高性能，<u>最大的优点是可以包含其他SELECET语句</u>。</li><li><strong>NOT操作符</strong>：否定其后所跟的任何条件，不单独使用且能放在过滤的列前。</li></ul><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><p>通配符本身实际上是SQL的WHERE子句中有特殊含义的字符，在使用通配符时必须使用LIKE操作符，有点类似于正则表达式。但尽可能少的使用通配符，且尽量放在最后，以提高运行的效率。      </p><ul><li><strong>百分号(%)通配符</strong>：%表示任何字符出现任意次数（包括0次），例如<code>SELECT prod_id,prod_name FROM Products WHERE prod_name </code> <em><code>LIKE &#39;Fish%&#39;</code></em> <code>;</code>表示Fish起头的任何字符。如果使用<code>LIKE &#39;F%Y&#39;</code>时会出现一个问题，文本Y之后跟有空格将不会被检索出来，解决办法时去掉空格或者使用’F%Y%’。      </li><li><strong>下划线( _ )通配符</strong>：_匹配的是单个字符。        </li><li><strong>方括号([ ])通配符</strong>：用于指定一个字符集，匹配其中的一个字符，可以用前缀字符<code>^</code>（拖字节）来取反。例如<code>LIKE &#39;[^JM]%&#39;</code>来否定整个字符集。     </li></ul><h3 id="创建计算字段"><a href="#创建计算字段" class="headerlink" title="创建计算字段"></a>创建计算字段</h3><p>储存在数据库中的数据一般杂乱无序，但需要在数据中找到一些有用的信息就需要计算字段。计算字段并不实际存在于数据库中，是运行时在SELECT语句内创建。一般来讲，数据库上完成操作比在客户端中更快。      </p><ul><li>**拼接(+或者||)**：例如<code>SELECT vend_name + &#39;(&#39; + vend_country + &#39;)&#39; FROM Vendors ORDER BY vend_name;</code>直接完成计算。<br>但是拼接过程中，取自不同表的数据宽度并不一致，并且有些会自动填充至列宽，这样返回的数据就会被填充很多不用的空格，为了去除空格可以使用<code>TRIM()</code>函数来完成。        </li><li>**使用别名(alias)**：在拼接完的字段生成后，是一个没有名字的值，所以客户端无法引用它，所以使用<code>AS</code>赋予其别名。例如<code>SELECT vend_name + &#39;(&#39; + vend_country + &#39;)&#39; </code> <em><code>AS vend_title</code></em> <code> FROM Vendors ORDER BY vend_name;</code>对比之前。</li><li><strong>执行计算</strong>：例如<code>SELECT prod_id,quantity,item_price,quantity * item_price AS expanded_price FROM OrderItems WHERE order_num = 20008;</code>直接增加一列expanded_price计算总价，并且客户端可以直接引用。</li></ul><h3 id="函数使用"><a href="#函数使用" class="headerlink" title="函数使用"></a>函数使用</h3><div class="note default flat"><p>几乎所有DBMS都支持SQL语句，但对函数及其使用而言都各不相同，所以SQL函数是不可移植的，所以使用函数时尽量做好注释或者少使用函数。</p></div>       <p>一般来讲SQL均支持<strong>处理字符串、算数、处理时间日期、返回DBMS信息</strong>的函数。</p><ul><li><strong>常用文本处理函数</strong>：<table><thead><tr><th align="left">函数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">LEFT( )/RIGHT( )</td><td align="left">返回字符串左边/右边的字符</td></tr><tr><td align="left">LEN( )</td><td align="left">返回字符串长度</td></tr><tr><td align="left">UPPER( )/LOWER( )</td><td align="left">将字符串转换为大/小写</td></tr><tr><td align="left">(L/R)TRIM( )</td><td align="left">去(左/右)空格</td></tr><tr><td align="left">SOUNDEX( )</td><td align="left">返回字符串的SOUNDEX值</td></tr></tbody></table><div class="note info flat"><p>SOUNDEX是一个将任何文本串转换为描述其语音表示的字母数字模式的算法，它考虑了类似的发音字符和音节，使得能对字符串进行发音比较而不是字母比较。虽然SOUNDEX不是SQL概念，但多数DBMS都支持。</p></div>       </li><li><strong>日期和时间处理函数</strong>：每种DBMS的时间函数均不一致，可移植性很差。例如Oracle没有Access的DATEPART()函数，所以使用<code>SELECT order_num FROM Orders WHERE to_number(to_char(order_date,&#39;YYYY&#39;)) = 2012;</code> 使用to_char()函数提取日期，to_number()转换为数值。而MySQL和MariaDB有各种日期处理函数例如YEAR()提取年份，所以使用时参阅文档。</li><li><strong>数值处理函数</strong>：一般用于代数、三角函数或者几何运算，但在主要的DBMS中，<u>数值函数是最一致、统一的函数</u>：<table><thead><tr><th align="left">函数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">ABS( )</td><td align="left">取绝对值</td></tr><tr><td align="left">SIN( )、COS( )、TAN( )</td><td align="left">三角函数</td></tr><tr><td align="left">EXP( )</td><td align="left">取期望</td></tr><tr><td align="left">PI( )</td><td align="left">圆周率</td></tr><tr><td align="left">SQRT( )</td><td align="left">平方根</td></tr></tbody></table></li></ul><h3 id="数据汇总"><a href="#数据汇总" class="headerlink" title="数据汇总"></a>数据汇总</h3><p>有些时候我们需要汇总数据但是不用实际检索出来，所以SQL提供了聚集函数用于分析和报表生成：<strong>确定行列数</strong>、<strong>求和行内值</strong>、<strong>最大（小）/平均值</strong></p><table><thead><tr><th align="left">函数</th><th align="left">说明</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">AVG( )</td><td align="left">取某列平均值</td><td align="left"></td></tr><tr><td align="left">COUNT( )</td><td align="left">返回某列行数</td><td align="left">COUNT(*)计数全部包含NULL COUNT(COLUMN)忽略NULL</td></tr><tr><td align="left">MAX/MIN( )</td><td align="left">取某列最大/小值</td><td align="left">文本数据时返回排序后的最后（前）一行，且忽略NULL</td></tr><tr><td align="left">SUM( )</td><td align="left">返回某列之和</td><td align="left"></td></tr></tbody></table><ul><li><strong>关于聚集函数</strong>：</li></ul><ol><li>对于上述函数，如果指定ALL参数或者不指定参数，均对所有执行计算。</li><li>如果只包含不同值，在参数内加入DISTINCT参数。</li><li>DISTINCT不能用于COUNT(*)，所以DISTINCT必须使用列名。</li></ol><h3 id="分组数据"><a href="#分组数据" class="headerlink" title="分组数据"></a>分组数据</h3><p>从上一节知道可以通过聚集函数可以汇总数据，但是如果数目过多每次只能返回一组数据，那么分组数据显得更加方便。      </p><ul><li><strong>创建分组GROUP BY()</strong>:例如<code>SELECT vend_id,COUT(*) AS num_prods FROM Products </code> <em><code>GROUP BY</code></em> <code>vend_id;</code>需要注意的是：        </li></ul><ol><li>GROUP BY 可以包含任意数目的列，所以可以进行分组嵌套。</li><li>如果嵌套了分组，将在最后指定的分组上进行汇总。</li><li>子句中必须是有效的表达式（不能是聚集函数）且不能使用别名。</li><li>如果在SELECT中使用表达式，则在GROUP BY 中也应指定相同的表达式。</li><li>大多数SQL不允许GROUP BY 列带有长度可变的类型。</li><li>如果包含NULL值的行，则NULL将作为一个分组返回，且多行NULL将被分为一组。</li><li>GROUP BY 子句必须在WHERE子句之后，ORDER BY 之前。</li></ol><ul><li><strong>过滤分组HAVING</strong>：之前在过滤时使用WHERE语句，但是他只能过滤行但是不能作用于分组，所以使用HAVING子句来代替WHERE。最大的区别在于WHERE先过滤，而HAVING则是先分组后过滤，顺序可能会改变计算值。例如<code>SELECT vend_id,COUNT(*) AS num_prods FROM Products WHERE prod_price &gt;=4 GROUP BY vend_id HAVING COUNT(*)&gt;=2;</code>这是先过滤出价格大于4的供应商再进行分组过滤。<div class="note warning flat"><p>HAVING和WHERE非常类似，如果不指定GROUP BY，大多数DBMS会同等对待他们，所以一定要配合同步使用。</p></div>   </li><li><strong>关于分组与排序</strong>：ORDER BY 和 GROUP BY 两者常常完成同样工作，但是非常不同。但GROUP BY 确实时按分组顺序输出，但不一定是所需要的顺序，所以应提供明确的ORDER BY 子句。<table><thead><tr><th align="left">ORDER BY</th><th align="left">GROUP BY</th></tr></thead><tbody><tr><td align="left">对产生的输出排序</td><td align="left">对行分组，但输出可能不是分组顺序</td></tr><tr><td align="left">任意列都可以使用</td><td align="left">只能对选择列或者表达式列，且必须使用每个选择列表达式</td></tr><tr><td align="left">不一定需要</td><td align="left">如果与聚集函数一起使用列（或表达式），则一定要使用</td></tr></tbody></table></li><li><strong>SELECT 子句顺序及说明</strong>：<table><thead><tr><th align="left">子句</th><th align="left">说明</th><th align="left">是否必须使用</th></tr></thead><tbody><tr><td align="left">SELECT</td><td align="left">要返回的列或表达式</td><td align="left">是</td></tr><tr><td align="left">FROM</td><td align="left">从中检索数据的表</td><td align="left">仅在选择表数据时使用</td></tr><tr><td align="left">WHERE</td><td align="left">行级过滤</td><td align="left">否</td></tr><tr><td align="left">GROUP BY</td><td align="left">分组说明</td><td align="left">仅在按组计算聚集时使用</td></tr><tr><td align="left">HAVING</td><td align="left">组级过滤</td><td align="left">否</td></tr><tr><td align="left">ORDER BY</td><td align="left">输出排序顺序</td><td align="left">否</td></tr></tbody></table></li></ul><h3 id="使用子查询"><a href="#使用子查询" class="headerlink" title="使用子查询"></a>使用子查询</h3><p>一般来讲数据库中的表都是关系表，如果要进行多层的查询便是查询的嵌套，即子查询。但包含子查询的语句会变得难以阅读和调试，所以应当进行适当的缩进。例如：</p><blockquote><p>SELECT cust_name , cust_contact<br>FROM Customers<br>WHERE cust_id IN (SELECT cust_id<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;FROM Orders<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;WHERE order_num IN (SELECT order_num<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&ensp;&emsp;&emsp; FROM OrderItems<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; WHERE prod_id = ‘RGAN01’));</p></blockquote><p>最里边的子查询返回订单号列表，用于其外面的子查询WHERE子句。外面的子查询返回顾客ID列表，用于最外层的WHERE子句。最外层查询返回所需要的数据。但子查询并不是最有效的方法，在后面章节将给出更多的论述。</p><div class="note warning flat"><p>子查询的SELECT只能用于查询单个列，如果查询多个将返回错误!</p></div>  <p>同样可以以计算字段作为子查询例如：</p><blockquote><p>SELECT cust_name,<br>&emsp;&emsp;&emsp;&ensp;cust_state,<br>&emsp;&emsp;&emsp;&ensp;(SELECT COUNT(*)<br>&emsp;&emsp;&emsp;&emsp;FROM Orders<br>&emsp;&emsp;&emsp;&emsp;HERE Orders.cust_id = Customers.cust_id) AS orders</p><p>FROM Customers<br>ORDER BY cust_name;</p></blockquote><p>子查询中的WHERE子句与前面使用的WHERE子句稍有不同，因为他使用了完全限定列名（cust_id）。他指定表名和列名（Orders.cust_id和Customers.cust_id）。子查询中用一个句点分隔表名和列名，在有可能混淆列名时必须使用这种语法。但它并不是最有效的方法，在后面学习JOIN时，同样有更多的论述。</p><h3 id="联结表"><a href="#联结表" class="headerlink" title="联结表"></a>联结表</h3><p>联结表是SQL最强大的功能之一，是利用SQL的SELECT能执行的最重要的操作。将多个表分开储存并且相互联系起来，这样可以节省空间也便于维护。联结是一种机制，在一条SELECT语句中关联包。        </p><ul><li><strong>创建联结</strong>：例如<code>SELECT vend_name,prod_name,prod_price FROM Vendors,Products WHERE Vendors.vend_id = Products.vend_id;</code>和以前的SELECT语句不同，这里指定的两列（prod_name和prod_price）在一个表，而第三列（vend_name）在另一个表。而在FROM子句中，则是只列出了2个表：Vendors和Products，而将两个表正确联结的是WHERE子句，将Vendors中的vend_id和Products中的vend_id匹配起来。如果缺省了WHERE语句过滤，则会将第一个表的每一行和第二个表每一行匹配无论逻辑是否正确，返回的表的结果为笛卡尔积。</li><li><strong>内联结</strong>：目前使用的联结称为等值联结（equijoin），这种联结也成为内联结（inner join）。也可以对联结使用不同的语法来指定类型，例如：<code>SELECT vend_name,prod_name,prod_price FROM Vendors INNER JOIN Products ON Vendors.vend_id = Products.vend_id;</code>这个与之前SELECT语法相同，但FROM不同，这里量表的关系是以INNER JOIN指定的部分FROM子句。在使用时，联结条件用特定的ON子句而不是WHERE子句给出，传递给ON的实际条件和传递给WHERE的相同。<div class="note info flat"><p>在联结处理时可能十分耗费资源，联结越多性能下降越厉害，虽然SQL本身不限制联结约束中表的数目，但实际上许多DBMS会有限制，具体参考其对应文档。</p></div>  再回顾一下<u>使用子查询</u>的例子：之前说到子查询不是最有效的方法，那就可以使用联结的相同查询：<blockquote><p>SELECT cust_name , cust_contact<br>FROM Customers , Orders , OrderItems<br>WHERE Customers.cust_id = Orders.cust_id<br>&emsp;AND OrderItems.Order_num = Order.order_num<br>&emsp;AND prod_id = ‘RGAN01’;</p></blockquote>  这里用联结表代替了嵌套的子查询，虽然方法各不相同，但性能会受操作类型的影响。</li></ul><h3 id="高级联结"><a href="#高级联结" class="headerlink" title="高级联结"></a>高级联结</h3><p>之前使用的都是简单的内联结或等值联结，现在介绍其他三种联结：自联结（self-join）、自然联结（natural join）和外联结（outer join）。       </p><ul><li><strong>自联结</strong>：例如想要给Jim Jones同一个公司的同事发邮件，如果使用子查询方式如下：<blockquote><p>SELECT cust_id , cust_name , cust_contact<br>FROM Customers<br>WHERE cust_name = (SELECT cust_name<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&ensp; FROM Customers<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&ensp; WHERE cust_contact = ‘Jim Jones’);</p></blockquote>该方法时先在表中通过Jim Jones工作的公司cust_name，然后用这个值继续在这张表中找到该公司工作的员工信息。      </li><li>但是如果使用自联结的话:<blockquote><p>SELECT c1.cust_id,c1.cust_name,c1.cust_contact<br>FROM Customers AS c1,Customers AS c2<br>WHERE c1.cust_name = c2.cust_name<br>&emsp;AND c2.cust_contact = ‘Jim Jones’;</p></blockquote>在两次查询中都是使用的相同的表，所以Customers表在FROM中出现了2次，但是对Customers的引用具有歧义性，因为DBMS不知道你使用的哪一张。所以我们将使用别名作为区分，如果不这样，DBMS将返回错误，因为cust_id,cust_name,cust_contact的列各有两个且DBMS不知道是哪一列（即使是同一列）。WHERE首先联结了2张表，然后再第二个表中过滤出数据再返回。</li><li><strong>自然联结</strong>：在联结时，必定有至少一列出现在两个不同的表中。标准联结返回所有的数据，相同的列甚至多次出现。自然联结排除多次出现，使每一列只返回一次。通过一个表使用通配符，而对其他表的列，使用明确子集来完成，例如：<blockquote><p>SELECT C.*  , O.order_num , O.order_date ,<br>&emsp;&emsp;&emsp;&ensp;OI.prod_id , OI.prod_quantity , OI.item_price<br>FROM Customers AS C , Order AS O , OrderItems AS OI<br>WHERE C.cust_id = O.cust_id<br>&emsp;AND OI.order_num = O.order_num<br>&emsp;AND OI.prod_id = ‘RGAN01’;</p></blockquote>在这个例子中，只有第一个表使用了通配符，而通过其他列的筛选使得没有重复的列呗检索出来，实际上迄今我们使用的每个内联结都是自然联结。</li><li><strong>外联结</strong>：许多联结会将一个表中的行和另外一个表的行相关联，但有时候需要包含没有关联的行，这就要使用外联结。对比之前的内联结——<blockquote><p>SELECT Customers.cust_id , Orders.order_num<br>FROM Customers INNER JOIN Orders<br>&ensp; ON Customers.cust_id = Orders.cust_id;</p></blockquote>  外联结语法类似——<blockquote><p>SELECT Customers.cust_id , Orders.order_num<br>FROM Customers LEFT OUTER JOIN Orders<br>&ensp; ON Customers.cust_id = Orders.cust_id;</p></blockquote>  内联结与外联结不同的是，外联结还包含了没有关联的行，在使用OUTTER JOIN时，就必须使用RIGHT或者LEFT关键字来指定其包含所有行的表。还有一种外联结叫做<u>全外联结</u>，其检索两个表中所有行并关联那些可以关联的行，关键字使用FULL即可，但很多DBMS均不支持这种语法。</li><li><strong>使用带聚集函数的联结</strong>：聚集函数与联结可以同时使用，例如——<blockquote><p>SELECT Customers.cust_id,<br>&emsp;&emsp;&emsp;&ensp;COUNT(Orders.order_num) AS num_ord<br>FROM Customers LEFT OUTER JOIN Orders<br>&emsp; ON Customers.cust_id = Orders.cust_id<br>GROUP BY Customers.cust_id;</p></blockquote>所以在使用联结时一定要注意联结类型，且关于联结语法应参考对应的DBMS文档。使用联结一定要保证条件正确，防止出现笛卡尔积。应当降低联结的表数，以方便测试和维护。</li></ul><h3 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h3><p>多数SQL语句查询只返回单挑的数据，同时SQL也支持多个查询且返回集合的形式。组合查询通常被称为<strong>并（union）</strong>或者<strong>复合查询（compound query）</strong>。<br>主要有两种情况需要使用组合查询：</p><ol><li>在一个查询中从不同表返回结构数据。</li><li>对一个表执行多个查询，按一个查询结果返回。   </li></ol><div class="note info flat"><p>多数情况下，组合查询与多个WHERE子句所完成的工作相同 — — 任何具有多个WHERE的SELECT语句均可作为一个组合查询。</p></div>  <ul><li><p><strong>创建组合查询</strong>：直接将<code>语句1</code>和<code>语句2</code>用<code>UNION</code>连接起来即可，将会返回两个语句所形成的<u>集合</u>，但应该查看DBMS文档了解最大语句数目限制。关于性能问题：WHERE子句和UNION理论上没有实际的差别，但在优化程序时应当测试差异。</p></li><li><p><strong>UNION规则</strong>：</p><ol><li>必须由多条SELECT语句组成且用UNION连接。</li><li>每个查询语句必须包含相同的列、表达式、聚集函数（不需要相同次序）</li><li>列数据类型应保持兼容。   </li></ol></li><li><p><strong>UNION性质</strong>：</p><ol><li>因为返回的数据类型为集合，所以当不同的SELECT语句返回相同数据时将会被去重，如果想保留原始重复数据应使用<code>UNION ALL</code>语句。</li><li>SELECT语句输出时我们会使用<code>ORDER BY</code>进行排序，而在使用UNION组合查询时，只能用一次<code>ORDER BY</code>函数且必须位于最后一条SELECT语句之后，因为要保证排序的唯一性。<u>看似ORDER BY只对最后一个SELECT语句进行排序，但实际上是先组合查询后再执行ORDER BY语句排序的。</u></li></ol></li></ul><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><p>插入数据也是十分常用的语句，用于插入完整行、行的一部分或者某些查询数据。使用INSERT插入语句时需要在客户端/服务器DBMS中获得相对应的安全权限。</p><ul><li><strong>插入完整行</strong>：使用<code>INSERT INTO</code>语句给对应的表插入新值，例如<code>INSERT INTO Customers VALUES (&#39;XXX&#39;,&#39;XXX&#39;,&#39;XXX&#39;,NULL);</code>。需要注意的是，必须根据表的结构每一列提供一个值，或者使用NULL填充。因为这种语句高度依赖于表中列的定义次序，还依赖于其容易获得的次序信息，虽然语法简单但应该尽量避免使用。<br>如果想使用更安全的方法也可以，指定对应的列名来控制其匹配的次序。对比之前——<code>INSERT INTO Customers(第一列，第二列，第三列，第四列) VALUES (&#39;XXX&#39;,&#39;XXX&#39;,&#39;XXX&#39;,NULL);</code>即使表结构改变也可能正常工作。如果想只给部分列赋值，拿就在表的列名和值中缺省对应的项即可。<div class="note warning flat"><p>虽然INSERT中可以省略某些列，但必须保证该列可设置为NULL值或者给定默认值。如果表中不允许有NULL或者默认值却省略列，则会禅城错误，相应行不能成功插入。</p></div>  </li><li><strong>插入检索出的数据</strong>：同时使用<code>INSERT INTO</code>语句和<code>SELECT</code>语句组合将筛选出来的表插入到新表中，且不需要保证列名相同，只需要保证位置正确即可。</li><li><strong>从一个表复制到另一个</strong>：可以不使用<code>INSERT</code>语句转而使用<code>SELECT INTO</code>语句。与<code>INSERT SELECT</code>不同的是，<code>INSERT INTO</code>是将数据复制到一个新表内（且有的DBMS可以覆盖之前的表），而前者是插入数据，后者相当于是导出数据，所以后者经常用于复制副本以测试。</li></ul><h3 id="更新和删除数据"><a href="#更新和删除数据" class="headerlink" title="更新和删除数据"></a>更新和删除数据</h3><p>更新和删除数据可以选择特定行也可以选择所有行，同样和插入数据一样需有足够的安全权限。</p><ul><li><strong>更新数据</strong>：使用<code>UPDATE</code>语句由三部分构成：要更新的表、列名和新值、过滤条件——<code>UPDATE 表 SET 列名 = &#39;XXX&#39; WHERE 过滤条件</code>，如果想要更新多列用逗号(<code>,</code>)隔开将条件间隔即可，也可以将值设置为NULL（前提是允许）来删除某列的值。</li><li><strong>删除数据</strong>：使用<code>DELETE</code>语句类似于<code>SELECT</code>语句，用子句筛选要删除的列或整表。<code>DELETE</code>不需要列名或者通配符，其删除的是整行而不是删除列，要删除指定列的时候应使用<code>UPDATE</code>语句。    <div class="note warning flat"><p><strong><code>关于外键的使用:</code></strong><br>在之前提到的简单联结只需要两个表的共用字段，也可以让DBMS通过外键来严格实施关系。存在外键时，DBMS使用它实施引用完整性。例如要在Product表中插入一个新产品，而vend_id是以外键连接到Vendors表的。这样我使用DELETE语句在Product表删除产品时（而这个产品也用在OrderItem订单中），就可以防止出现错误。</p></div>   </li><li><strong>使用原则</strong>：<ol><li>除非更新和删除每一行，一定要使用带WHERE的DELETE或者UPDATE语句。</li><li>保证每个表都拥有主键且尽可能的像WHERE语句一样使用。</li><li>在UPDATE或DELETE使用前，尽量使用SELECT语句先进行测试。</li><li>使用强制实施引用完整性的数据库（防止允许删除数据与其关联的行）。</li><li>谨慎使用更新和删除，并查询是否存在撤销（undo）功能。</li></ol></li></ul><h3 id="创建和操纵表"><a href="#创建和操纵表" class="headerlink" title="创建和操纵表"></a>创建和操纵表</h3><p>在之前章节所讲到的是操纵表内的数据，SQL还能直接用于表的创建和处理。</p><ul><li><strong>创建表</strong>：创建表可以通过交互式创建和管理数据库表的工具，也可以直接使用SQL语句进行操作。用程序创建表可以使用<code>CREATE TABLE</code>语句，具体的DBMS应参考对应文档。实际上使用交互式工具就是使用SQL语句，这些语句不是用户编写的，工具会自动生成并执行相应语句。<br>创建新表时，新表名字跟在<code>CREATE TABLE</code>语句之后，名字和定义用逗号(<code>,</code>)隔开，并且有些DBMS还要求指定表的位置。例如<code>CREATE TABLE Products(列名1 数据类型 是否允许NULL,列名2 数据类型 是否允许NULL);</code><div class="note success flat"><p>在之前提到SQL语句会忽略其中的空格，所以在上述创建表的过程中使用空格仅仅是为了易于阅读与编辑。</p></div>   </li><li><strong>是否使用NULL值</strong>：如果需要允许使用NULL时，在数据类型后使用<code>NULL</code>语句或者缺省，如果不允许则使用<code>NOT NULL</code>，但并不是所有DBMS都时默认使用NULL的。但是NULL值与空字符串’’不同，空字符串是一个有效的值并非无值。</li><li><strong>指定默认值</strong>：在插入行时不给出值，DBMS将自动填充默认值，使用<code>DEFAULT</code>语句来指定字段，且常用于日期或者时间戳列。</li><li><strong>更新表</strong>：可以使用<code>ALTER TABLE</code>语句来更新表定义，虽然所有DBMS都能使用但差别很大。多数DBMS可以使用<code>RENAME</code>语句来重命名。尽量不要在表中包含数据时对其进行更新，并且对列的删除与重命名限制各不相同，应先参考对应的文档。在语句<code>ALTER TABLE</code>后应该给出要更改的表名，以及要做出的更改，例如：<code>ALTER TABLE Vendors ADD vend_phone CHAR(20)</code>，但在使用其语句时应极为小心，<u>数据库表的更改不能撤销，如果增加了不需要的行可能无法删除，删除了不该删除的列可能会丢失全部数据。</u></li><li><strong>删除表</strong>：删除整个表包括其结构使用<code>DROP TABLE</code>语句，删除表没有确认也不能撤销。</li></ul><h3 id="使用视图"><a href="#使用视图" class="headerlink" title="使用视图"></a>使用视图</h3><p>视图与表内的数据不同，是虚拟的表，他只包含使用动态检索数据的查询。比如我要将三个表使用WHERE通过一个字段联结，WHERE语句会变得很长。而如果把整个查询包装成一个虚拟的表，这样就可以直接SELECT FROM轻松检索，而这个表就是视图的作用，所以视图包含的是一个查询。<br>视图相当于是将SQL语句封装和重用而并非用来储存数据，虽然可以简化操作和保护数据，但是当创建了很复杂的视图或者嵌套，性能将下降的非常厉害，所以在使用前应当测试。</p><ul><li><strong>创建/删除视图</strong>：和创建表类似，使用<code>CREATE/DROP VIEW</code>来创建/删除视图，<u>覆盖和更新视图必须先删除它再重新创建。</u></li><li><strong>使用视图简化联结</strong>：例如<code>CREATE VIEW ProductCustomers AS SELECT XXX FROM XXX WHERE XXX AND XXX</code>这样就创建了一个名为ProductCustomers的视图，就封装了这个联结且之后可以直接用FROM语句调用。  </li></ul><p>视图因为类似于条件语句的封装，所以还能包含筛选、计算字段、格式调整，可以用来简化、格式化或者保护基础数据。</p><h3 id="使用储存过程"><a href="#使用储存过程" class="headerlink" title="使用储存过程"></a>使用储存过程</h3><p>对于视图而言是对条件子句的封装，而储存过程则是相当于对SQL语句的封装，为以后使用而保存的一条或者多条SQL语句。<strong>所有储存过程都支持–（2个连字符）来进行注释</strong></p><ul><li><strong>执行储存过程</strong>：储存过程的执行比创建编写频繁得多，但是用起来很简单。使用<code>EXECUTE</code>接受储存过程名和需要传递的参数，例如：<code>EXECUTE AddNewProduct(&#39;XXX1&#39;,&#39;XXX2&#39;,&#39;XXX3&#39;);</code>这里执行了一个名为AddNewProduct的储存过程，共有3个参数。</li><li><strong>创建储存过程</strong>：相对而言创建储存过程更加重要，<u>现在是以Oracle版本为例</u>：<blockquote><p>CREATE PROCEDURE MailingListCount(ListCount OUT INTEGER) IS v_row INTEGER;<br>BEGIN<br>&emsp;&emsp;SELECT COUNT(*) INTO v_rows FROM Customers WHERE NOT cust_email IS NULL;<br>&emsp;&emsp;ListCount :=v_rows;<br>END;</p></blockquote>这个储存过程有一个名为ListCount的参数。这个参数从储存过程返回一个值而不是传递一个值给储存过程。Oracle支持IN（传递给储存过程）、OUT（从储存过程返回值）INOUT（即储存又返回）类型的参数。储存过程的代码括在BEGIN和END语句中，这里是检索出有邮件和地址的客户，然后用检索出的行数设置ListCount。<br>调用时：<blockquote><p>var ReturningValue NUMBER<br>EXEC MailingListCount(:ReturnValue);<br>SELECT ReturningValue;</p></blockquote>这段代码声明了一个变量来保存储存过程的返回值，然后执行储存过程，再用SELECT筛选返回。    <div class="note success flat"><p>储存过程是相对复杂的主题，无法完全涉及且各种DBMS实现各不相同，在使用其功能前应参阅对应文档。</p></div>   </li></ul><h3 id="管理事务处理"><a href="#管理事务处理" class="headerlink" title="管理事务处理"></a>管理事务处理</h3><p>事务处理（transaction processing）是通过确保成批的SQL操作要么完全执行，要么完全不执行，来维护数据库完整性的。例如在MYSQL中代码为：<code>START TRANSACTION ···</code>，可以发现一般没有明确标识事务处理在何时结束，事务一直存在直到被中断。各种DBMS实现各不相同，在使用前应参阅文档。</p><ul><li><strong>使用ROLLBACK</strong>：例如<code>DELETE FROM Orders;ROLLBACK;</code>，先执行DELETE再用ROLLBACK撤销。</li><li><strong>使用COMMIT</strong>：一般SQL语句是隐式语句（implicit commit），是针对数据库表直接执行编写的，提交自动进行。但在事务处理中一般不会隐式进行（但有些DBMS也会）。在创建事务处理之后使用<code>COMMIT;</code>即可。</li><li><strong>使用保留点</strong>：使用简单的ROLLBACK和COMMIT即可写入和撤销事务。但复杂的事务则需要进行回退。在许多DBMS中可以使用<code>SAVEPOINT XXX</code>创建占位符，在需要回退时使用<code>ROLLBACK TO XXX</code>即可。</li></ul><h3 id="使用游标"><a href="#使用游标" class="headerlink" title="使用游标"></a>使用游标</h3><p>SQL检索返回的结果集会有很多行，没办法定位到某行或某部分。游标是一个储存在DBMS服务器上的数据库查询，但不是一条SELECT语句，而是被该语句检索出来的结果集。储存了游标之后，可以根据需要滚动或者浏览其中的数据。<br><strong>关于其特性：</strong></p><ul><li>可控制游标为只读，防止数据更新和修改。</li><li>可控制进行定向操作（相对位置、绝对位置）。</li><li>能标记和规定范围。</li><li>指示DBMS对检索出的数据进行复制，且使数据在游标打开和访问期间不变化。  </li></ul><p>在使用游标前，需要提前声明它，一旦声明之后就必须打开游标以供使用，这个过程用定义的SELECT语句把数据检索出来。在游标使用结束后，必须关闭游标，可能的话应释放游标。文章只介绍游标的基本使用，其他详细功能应参考对应的文档说明。</p><ul><li><strong>创建游标</strong>：使用<code>DECLARE</code>语句创建游标，在不同DBMS中语法不同。该语句命名游标并定义相对的SELECT语句，根据需要使用WHERE和其他子句。例如MYSQL中：<code>DECLARE CustCursor CURSOR FOR SELECT * FROM Customers WHERE cust_email IS NULL</code>定义名为CustCursor的游标来标记没有电子邮箱的客户。</li><li><strong>使用/关闭游标</strong>：使用<code>OPEN/CLOSE CURSOR</code>语句打开/关闭游标，且在大多数DBMS中语法相同，部分DBMS要求在关闭游标之后释放。一旦游标关闭，如果需要重新使用无需再声明，只要OPEN打开即可。</li></ul><h2 id="高级SQL特性"><a href="#高级SQL特性" class="headerlink" title="高级SQL特性"></a>高级SQL特性</h2><p>此书中介绍SQL所设计的几个高级特性：约束、索引、触发器，使用前应参阅对应文档。</p><h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><p>关联与引用完整性在之前的章节有提到，关系数据库存储分解为多个表的数据，每个表储存相应的数据。利用键来建立从一个表到另一个表的引用，所以产生了术语引用完整性（referential integrity）。正确的进行关系数据库设计，需要保证在表中插入合法数据，虽然可以在新插入前使用SELECT进行检查，保证所有值存在且合法但不应这样做：</p><ol><li>如果在客户端层面上实施数据库完整性规则，则所有客户端均被迫实施，且会有部分客户端不实施。</li><li>在执行UPDATE和DELETE时也必须实施这些规则。</li><li>执行客户端检查非常耗时，而DBMS执行起来会相对高效。</li></ol><p>DBMS通过在数据库表上施加约束来实施引用完整性，大多数约束是在表中定义的。</p><ul><li><strong>主键</strong>：是一种特殊的约束，值是唯一的且<u>永不改动和重用</u>。这个唯一的值标识表中的每一行，以方便交互表中的行。创建时，在定义列的末尾添加<code>PRIMARY KEY</code>即可，如果要给表的列添加关键字使其成为主键，使用<code>ALTER TABLE</code>更新表且使用语句<code>ADD CONSTRAINT PRIMARY KEY(xxx);</code>来添加主键值。</li><li><strong>外键</strong>：外键是表中的一列，其值必须列在另一个表的主键中。比如Orders表和Customers表，订单表内每个订单号作为主键唯一，顾客表内顾客ID作为主键唯一。为了限定订单信息中顾客一定要来自于顾客表内，这样就需要在订单表中定义一个顾客ID的外键，保证引用完整性。<br>使用外键和添加外键的语法和主键类似：在列定义末尾添加<code>REFERENCES</code>字段即可，额外添加使用<code>ALTER</code>更新和子句<code>ADD CONSTRAINT FOREIGN KEY(列XX) REFERENCES 表XXX (列XX)</code>。使用外键的另一个重要作用即是方便维护，如果想删除一个顾客，那么需要先删掉顾客相关的订单，则可以使用外键来删除以防止意外。有的DBMS支持级联删除（cascading delete）特性，启用的话将会关联删除。</li><li><strong>唯一约束</strong>：唯一约束用来保证一列或一组列中的数据唯一，类似于主键但有许多区别。约束不同于主键的唯一性可更新、重用、可包含NULL、可设置多个约束，<u>但不能用来定义外键</u>。唯一约束既可以用<code>UNIQUE</code>关键字定义，也可以用单独的<code>CONSTRAINT</code>定义。</li><li><strong>检查约束</strong>：用于保证一列数据满足一组指定的条件。常用于最值、范围值、特定值，使用<code>CHECK()</code>子句来限定条件，参考LIKE子句与通配符搭配使用。<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3>索引用于加快搜索和排序操作的速度。主键数据总是排序的，因此按主键检索特定行总是一种快速有效的操作。但搜索其他列中的值时效率不搞，因为表数据未经过排序。但在创建索引前应留意：</li><li>索引改善检索的性能，但降低了数据插入、修改和删除的性能。因为在执行时，DBMS必须动态更新索引。</li><li>索引数据可能占用大量空间，所以并非所有数据都适合索引，应选择用于过滤和排序的数据。</li><li>可以在索引中定义多个列，但不一定有用。</li></ul><p><strong>创建方法</strong>：使用<code>CREATE INDEX * ON *表（*列）</code>来创建索引，索引必须唯一命名且用ON来指定被索引的表。使用的效率随表数据的变化而变化，最好做定期的检查并根据需要进行调整。</p><h3 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h3><p>是特殊的储存过程，在特定数据库活动发生时自动执行。与储存过程不一样（储存过程知识存储SQL语句），触发器与单个的表相关联。触发器内的代码具有的访问权限：</p><ul><li>INSERT操作中的所有新数据。</li><li>UPDATE操作中的所有新数据和旧数据。</li><li>DELETE操作中删除的数据。</li></ul><p>根据所使用的DBMS不同，触发器可在特定操作执行之前和之后触发。一般触发器可以用于保证数据一致（转换大小写）、基于表变动而变动（例如记录日志）、数据验证、更新和计算列（例如时间戳）。<br>不同的触发器语法差异很大，例如Oracle的版本：</p><blockquote><p>CREATE TRIGGER customer_state<br>AFTER INSERT OR UPDATE<br>FOR EACH ROW<br>BEGIN<br>UPDATE Customers<br>SET cust_state = Upper(cust_state)<br>WHERE Customers.cust_id = :OLD.cust_id<br>END;</p></blockquote><p>这个则是使用触发器将改动的表内数据转换为大写，一般来说，约束器的处理速度比触发器要快，在可能的适合尽量使用约束。</p><h3 id="数据库安全"><a href="#数据库安全" class="headerlink" title="数据库安全"></a>数据库安全</h3><p>大多数DBMS都提供了管理机制，任何安全系统的基础都是用户授权和身份确认。一般来说，需要保护的操作有：</p><ul><li>对数据库管理功能（创建、更新、删除）的访问</li><li>对特定数据库的访问</li><li>访问类型（只读、特定列访问）</li><li>仅通过试图或者储存过程对表访问</li><li>创建多层次安全措施，从而允许多种基于登录的访问和控制</li><li>限制管理用户账号的权力</li></ul><p>安全性使用SQL的GRANT和REVOKE语句来管理，但是大多数DBMS提供了交互式管理实用程序。</p><h2 id="资源相关"><a href="#资源相关" class="headerlink" title="资源相关"></a>资源相关</h2><p>本书中样表下载地址：<a href="http://www.forta.com/books/0672336073/">http://www.forta.com/books/0672336073/</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> 学习笔记 </category>
          
          <category> 入门 </category>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GIT的入门学习与笔记</title>
      <link href="2020/11/11/git_guide/"/>
      <url>2020/11/11/git_guide/</url>
      
        <content type="html"><![CDATA[<h2 id="指令一览"><a href="#指令一览" class="headerlink" title="指令一览"></a>指令一览</h2><table><thead><tr><th align="left">作用</th><th align="left">指令</th><th align="left">注释</th></tr></thead><tbody><tr><td align="left">初始化</td><td align="left">git init</td><td align="left">生成.git</td></tr><tr><td align="left">添加</td><td align="left">git add</td><td align="left">添加到库</td></tr><tr><td align="left">确认添加</td><td align="left">git commit</td><td align="left">-m 后跟””添加备注</td></tr><tr><td align="left">查看库状态</td><td align="left">git status</td><td align="left">包含未commit的内容</td></tr><tr><td align="left">查看差异</td><td align="left">git diff xxx</td><td align="left">对比文件add后的差异</td></tr><tr><td align="left">查看版本日志</td><td align="left">git log</td><td align="left">简化参数--pretty=oneline</td></tr><tr><td align="left">查看操作日志</td><td align="left">git reflog</td><td align="left"></td></tr><tr><td align="left">回溯git库</td><td align="left">git reset</td><td align="left">后跟版本号前几位即可</td></tr><tr><td align="left">回溯工作区</td><td align="left">git checkout -- file</td><td align="left">删除工作区内容回退到git库版本 增加-b参数可添加并切换（branch)</td></tr><tr><td align="left">删除暂存区文件</td><td align="left">git rm</td><td align="left">不会删除工作区内容</td></tr><tr><td align="left">链接远程库</td><td align="left">git remote add</td><td align="left">例如git@github.com:xxx2/xxx3.git</td></tr><tr><td align="left">连接远程库</td><td align="left">git push (-u)</td><td align="left">参数&lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</td></tr><tr><td align="left">合并分支</td><td align="left">git merge</td><td align="left">--no-f 禁用fast forward模式</td></tr><tr><td align="left">切换分支</td><td align="left">git switch</td><td align="left"></td></tr><tr><td align="left">储存便签</td><td align="left">git stash</td><td align="left">git stash pop取回本地，list查看列表</td></tr><tr><td align="left">复制改动</td><td align="left">git cherry-pick</td><td align="left">重复一次commit的改动</td></tr><tr><td align="left">查看分支</td><td align="left">git branch</td><td align="left">-r查看远程 -a查看全部 -d删除本地 -D强制删除</td></tr><tr><td align="left">查看远程库信息</td><td align="left">git remote</td><td align="left">-v查看详细信息</td></tr><tr><td align="left">合并历史提交分叉</td><td align="left">git rebase</td><td align="left"></td></tr><tr><td align="left">创建标签</td><td align="left">git tag</td><td align="left">-a名字 -m备注 -push远程仓库:标签名</td></tr><tr><td align="left">查询.gitignore文件</td><td align="left">git check-ignore</td><td align="left"></td></tr></tbody></table><h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h2><ul><li><p>创建目录</p><blockquote><p>$ mkdir xxx<br>$ cd xxx<br>$ pwd<br>/Users/xxxxxxx/xxx</p></blockquote><p><code>pwd</code>命令用于显示当前目录。</p></li><li><p>通过<code>git init</code>命令把这个目录变成Git可以管理的仓库</p><blockquote><p>git init<br>Initialized empty Git repository in /xxx/xxx/</p></blockquote><p>目录下通过<code>.git</code>来追踪和管理库。</p></li><li><p>将文件添加到仓库<br>正如将大象放进冰箱需要三部，放如git仓库只需要两部，因为在验证ssh时就打开冰箱门了。</p><blockquote><p>$ git add xxx<br>$ git commit -m “notes”</p></blockquote><p>解释一下<code>git commit</code>命令，-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。<br><code>git commit</code>命令执行成功后会告诉你，<code>n file changed</code>：n个文件被改动（添加的XXX文件）等。</p></li></ul><h2 id="git库管理"><a href="#git库管理" class="headerlink" title=".git库管理"></a>.git库管理</h2><p>首先用<code>git status</code>查看仓库的当前状态，其中包含了add但没有commit的内容。<br>如果不记得具体修改了什么内容，使用<code>git diff xxxx</code>来查看对比文件commit前版本的差异。<br>如果没有文件被修改或者添加，则在git status后：</p><blockquote><p>$ git status<br>On branch master<br>nothing to commit, working tree clean</p></blockquote><p>Git告诉我们当前没有需要提交的修改，而且，工作目录是干净（working tree clean）的。</p><ul><li><p>版本的回退<br>在对文件进行了多次修改后，可以使用<code>git log</code>来查看不同的版本情况，<code>git log</code>命令显示从最近到最远的提交日志，<code>commit id</code>采用的是SHA1计算得出的数字,用十六进制表示。<br>如果嫌输出信息太多，看得眼花缭乱的，加上<code>--pretty=oneline</code>参数，每提交一个新版本，实际上Git就会把它们自动串成一条时间线。<br>首先，Git必须知道当前版本是哪个版本，在Git中，用<code>HEAD</code>表示当前版本，每网上一个版本就在<code>HEAD</code>后面加一个<code>^</code>，例如前两个版本<code>HEAD^^</code>。<br>如果这时候你像回退到之前的版本则使用：</p><blockquote><p>$ git reset --hard head^</p></blockquote><p>这个时候版本已经被回退到了<code>head^</code>版本了，且在<code>git log</code>里面以及无法找到回退前的版本了。但是如果没有关闭过命令行窗口，那么有机会找到之前的版本号的，然后使用<code>reset 版本号</code>来回退，且版本号只需要填写前几位以区分即可。你回退到了某个版本，关掉了电脑，想恢复到新版本怎么办？Git提供了一个命令<code>git reflog</code>用来记录你的每一次命令，可以从中找到版本号。</p></li><li><p>git库的工作流程<br>首先，在你电脑里面所能见到的文件夹，可以称之为一个工作区（Working Directory），并且.git文件夹并不属于工作区，是git的版本库。而版本库（Repository）包含：称为stage（或者叫index）的暂存区；还有Git为我们自动创建的第一个分支<code>master</code>以及指向master的一个指针叫<code>HEAD</code>。在工作区的时候，我们把文件修改完并<code>git add</code>之后，可以理解为将工作区的东西复制到了版本库的暂存区。而<code>git commit</code>则是将暂存区的东西搬空放进master分支里面，就好比论文定稿一样，而<code>head</code>正是指向当前版本的“论文-最新版”。</p></li><li><p>版本库的回退<br>为什么Git比其他版本控制系统设计得优秀，因为Git跟踪并管理的是修改，而非文件。<br>当你完成“论文-一稿”并<code>git add</code>到暂存区之后，你可以通过<code>git status</code>查看状态。本来准备一气呵成定稿<code>commit</code>之后定稿的，结果论文老师突然直接叫改，于是在工作区把论文修改成了“论文-二稿”。<strong>这个时候你直接保存然后<code>commit</code>了！</strong>结果你在定稿的论文(<code>master</code>)里发现，还是原来的一稿版本，所以这就是在工作流程里提到的问题，要在二稿修改完<code>git add</code>覆盖上一次暂存区的内容之后再<code>git commit</code>。</p></li><li><p>工作区的回退<br>在你<code>commit</code>论文一稿之后，导师看完让你修改了二稿。结果你改完正准备要上传的时候发现：复制粘贴来的段落乱了。这时候你可以慢慢修改，如果用<code>git status</code>查看一下就会提示你:</p><blockquote><p>$ git status<br>On branch master<br>Changes not staged for commit:<br> (use “git add <file>…” to update what will be committed)<br> (use “git checkout -- <file>…” to discard changes in working directory)</p><p>   modified:   XXXXXX</p><p>no changes added to commit (use “git add” and/or “git commit -a”)</p></blockquote><p>Git提示使用<code>git checkout -- &lt;file&gt;</code>可以丢弃工作区的修改，也就是说:</p></li></ul><ol><li>如果你没有把乱码的二稿add进暂存区，那么你的文件将被撤销修改成commit的一稿。</li><li>如果你之前把正常的二稿add进了暂存区，而发现手中工作区二稿的乱码是你乱按导致的，那么在执行指令后，文件将被修改成暂存区里正常的二稿。<br><code>两种情况下工作区的文件都被丢弃了，并且优先去取暂存区的来替换。（说明论文不给导师看都有可能白给）</code></li></ol><ul><li>文件的删除<br>可以手动删除或者<code>git rm xxx</code>来删除文件，但是删除的是工作区的文件，如果想更改已经commit的文件时：<br>先在工作区用<code>rm xxx</code>删掉文件，这时候可以用<code>git status</code>命令看到提示说工作区和版本库不一致了。如果确实要删除则使用<code>git rm xxx</code>删除，然后<code>git commit</code>确认。<blockquote><p>注意：使用<code>rm</code>只会在工作区删除，而<code>git rm</code>是将暂存区的文件删除，建议执行操作时保持一致。</p></blockquote></li></ul><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><p>之前说过在本地有一个工作区和git库，而远程仓库就好比是一个大的货物中转中心。每台电脑的工作区就像是生产线，把生产好的产品放到本地的库里面，然后通过git这个运输线传递。平常自己销售货物的时候可以从自己的仓库里面取，缺货的时候就从大中转中心调货，而这个中转中心就是一个大的git库。所以有了github这个著名的大仓库以供使用，任何人都可以看到。<br>首先创建好自己的SSH KEY：<code>ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code>，在.ssh目录里，有<code>id_rsa</code>和<code>ir_rsa.pub</code>这个密码对，<code>id_rsa</code>是私钥，不能泄露出去，<code>id_rsa.pub</code>是公钥，可以放心地告诉任何人。</p><ul><li><p>上传到远程库<br>首先现在github上创建一个repository，然后执行<code>git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</code>将之与本地库链接。远程主机名默认origin，如果省略远程分支名，则表示将本地分支推送到与之存在”追踪关系”的远程分支，如果该远程分支不存在，则会被新建。可以使用<code>git push -u</code>来设置这个“追踪关系”。之后就可以用<code>git push</code>把本地库的内容推送到远程库了。<br>当第一次使用git的命令时，会得到一个警告：</p><blockquote><p>The authenticity of host ‘github.com (xx.xx.xx.xx)’ can’t be established.<br>RSA key fingerprint is xx.xx.xx.xx.xx.<br>Are you sure you want to continue connecting (yes/no)?</p></blockquote><p>这是在验证ssh的key时让你进行确认，然后将本机添加到信任列表之中。</p></li><li><p>从远程库下载<br>当我们关联好远程库之后，可以使用<code>git pull</code>是将以远程库为模板更新本地库，而使用<code>git clone</code>也可以将远程库的文件完全复制到本地，但是不需要连接到本地库也可以直接使用。</p></li></ul><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><p>分支管理就像是开设了多条不同流水线去合并生产一件产品，同时进行互不影响。</p><ul><li><p>分支的合并<br>在git库中，每个版本串成了一条时间线。就好比你拥有一个时光机，能来回的穿梭历史但不能去到未来，因为未来还没有确定下来。而分支是什么？比如你写好了一篇初稿论文让老师检阅，在这个不确定的情况下就是一个分支。老师想修改成A版本或者B版本，这时候老师先选了A版本定稿了就是A分支。这时候你坐了时光机又去找老师，这次老师选了B版本，这就是版本B，在两个次元互不影响。后来你发现这AB两个版本定稿的时候改成了同样的C版本，那么C就是分支的合并。<br>分支合并可以使用<code>git merge</code>命令用于合并指定分支到当前分支。例如你在A这条线定稿了，然后直接<code>git merge B</code>把B线路也直接快进到C，然后使用<code>git branch</code>显示只有一个C(master)分支了。<br>关于分支的切换，我们可以使用<code>git checkout</code>实现，但是因为容易和回溯混淆，建议使用<code>git switch</code>以作区分，添加<code>-c</code>参数可以创建新分支并同时切换。<br>但是如果分支B最后定稿的论文是D版本，那么合并的时候C和D就会冲突，将无法合并成到一条时间线上。可以使用<code>git status</code>查看冲突的位置，也可以用<code>git log</code>查看合并的情况（添加–graph可以看到合并图）。</p></li><li><p>*通常，合并分支时Git会用<code>Fast forward</code>模式，但这种模式下，删除分支后，会丢掉分支信息。如果使用了<code>merge --no-ff</code>，则会禁用默认的<code>fast forward</code>模式，而在实际开发时会保留多条线同时进行，定期合并**</p></li><li><p>分支的临时修订<br>我们在工作区工作的时候需要临时切换分支怎么办，可以使用<code>git stash</code>来把工作区临时存储起来，就像在草稿纸上写运算一样，计算到中途临时撕下来一页放在一边。事情做完之后可以使用<code>git stash pop</code>来把草稿纸上的计算滕到本子上来，然后扔掉草稿。如果撕掉的太多，就可以用<code>git stash list</code>从纸堆里找看有哪些便签。而你刚刚发现你做的工作会影响到我这个工作区内容，又不想重新做工作怎么办？使用<code>git cherry-pick</code>来把刚刚的版本号的变动再工作区再做一次。如果分支写了合并之前不想要了，就使用<code>git branch -D</code>来删除分支。</p></li><li><p>远程库的分支<br>与远程仓库连接后可以使用<code>git remote</code>查看远程库信息，或者添加<code>-v</code>参数查看更详细信息。在之前上传时说到远程库默认名为<code>origin</code>，然后使用<code>git push &lt;远程主机名&gt; &lt;远程分支名&gt;</code>来推送到指定位置。而再另一个机器上抓取分支时，只能看到主分支<code>master</code>，但是如果要使用其他分支例如dev上开发，就必须创建远程库的dev分支到本地。首先创建本地dev分支：<code>$ git checkout -b dev origin/dev</code>然后再push到远程dev分支，如果两次提交冲突就可以先使用<code>git pull</code>拉取最新的dev合并后再推送。在首次下拉之前会根据提示设置本地dev和远程库dev的链接：</p><blockquote><p>$ git pull<br>There is no tracking information for the current branch.<br>Please specify which branch you want to merge with.<br>See git-pull(1) for details.<br>   git pull <remote> <branch><br>If you wish to set tracking information for this branch you can do so with:<br>   git branch --set-upstream-to=origin/<branch> dev</p></blockquote></li><li><p>Rebase<br>如果在多端开发时，在提交改动时会发现有文件冲突，所以会再使用<code>git pull</code>拉取最新的远程库内容以更新，然后再提交本地库。这时候问题就出现了：提交的文件会在pull之后形成新的分支（因为一个是在本地基础上更新的，一个是在pull之后更新的，就类似于起跑线不一样），使用<code>git log</code>可以查看，这样明明在一条时间线上做修改但是最后变成了2条时间线。所以在修改完之后可以使用<code>git rebase</code>将时间线合为一条直线，就相当于把pull下来的文件当作你修改之前的样本了，所以不会产生历史分支了。</p></li></ul><h2 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h2><p>标签实际上就是给不同的提交取上别名，是一个指向每次commit的一个自定义指针。</p><ul><li><p>创建标签<br>首先切换到需要创建标签的分支上，然后使用<code>git tag &lt;标签名&gt;</code>来创建，如果想指定到任意一次commit，就在后面添加一个可辨识的commit id即可，然后使用<code>git tag</code>来查看全部标签，然后<code>git show &lt;标签名&gt;</code>来查看标签的详细信息。如果想创建更详细的标签，使用<code>-a</code>指定标签名，<code>-m</code>指定备注信息，例如<code>git -a xx -m xx &lt;commit id&gt;</code>。</p></li><li><p>管理标签<br>如果想要删除标签，使用<code>git tag -d &lt;标签名&gt;</code>来删除指定标签。如果想指定推送特定的commit，那么使用<code>git tag origin &lt;标签名&gt;</code>，或者直接<code>--tags</code>推送所有标签。但是如果推送之后想在远程库删除标签，就要现在本地删除之后再执行<code>git push origin :refs/tags/&lt;tagname&gt;</code>。</p></li></ul><h2 id="扩展文件"><a href="#扩展文件" class="headerlink" title="扩展文件"></a>扩展文件</h2><p>关于一些git的配置内容，例如<code>git config --global color.ui true</code>添加颜色，提高工作效率。</p><ul><li>忽略文件<br>在本地开发提交时，git会将所有内容上传至远程库。但这时需要忽略一部分文件（例如隐私、副本）的话，在git目录下创建一个.gitignore文件来配置忽略上传的清单。github上有大量模板使用：<a href="https://github.com/github/gitignore">https://github.com/github/gitignore</a><br>如果发现添加文件到git不成功，可能时是被.gitignore忽略了，可以使用<code>git check-ignore</code>来检查，然后使用<code>!+文件名</code>来反选特殊的文件，或者用<code>git add -f xxx</code>来强制添加到git库。</li><li>配置文件<br>如果想配置git相关内容，可以在<code>.git/config</code>文件中找到。其中[alias]是别名配置，可以使用<code>git config (--global) alias.XXX &#39;命令&#39;</code>来为当前命令，设置名为XX的别名，之后可以使用<code>git XXX</code>来代替<code>git 命令</code>来提高效率了。</li></ul><h2 id="资源相关"><a href="#资源相关" class="headerlink" title="资源相关"></a>资源相关</h2><p>内容引用：<a href="https://www.liaoxuefeng.com/wiki/896043488029600">廖雪峰的官方网站</a>      以及        <a href="https://github.com/renyuns/learngit">评论区的小伙伴</a><br>国外网友制作的pdf：<a href="https://gitee.com/liaoxuefeng/learn-java/raw/master/teach/git-cheatsheet.pdf">git cheat sheet</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> GIT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写博文常用的markdown语法</title>
      <link href="2020/10/26/markdown_guide/"/>
      <url>2020/10/26/markdown_guide/</url>
      
        <content type="html"><![CDATA[<h1 id="标题类别"><a href="#标题类别" class="headerlink" title="标题类别"></a>标题类别</h1><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br></pre></td></tr></table></figure><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h1 id="字体类别"><a href="#字体类别" class="headerlink" title="字体类别"></a>字体类别</h1><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="strong">**加粗**</span></span><br><span class="line"><span class="emphasis">*斜体*</span></span><br><span class="line"><span class="strong">**<span class="emphasis">*加粗+斜体<span class="strong">**<span class="emphasis">*</span></span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong"><span class="emphasis">~~删除线~~</span></span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong"><span class="emphasis">------</span></span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong"><span class="emphasis">------</span></span></span></span></span><br></pre></td></tr></table></figure><p><strong>加粗</strong><br><em>斜体</em><br><strong><em>加粗+斜体</em></strong><br><del>删除线</del></p><hr><hr><h1 id="特殊"><a href="#特殊" class="headerlink" title="特殊"></a>特殊</h1><h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">`强调`</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">code</span>&gt;</span></span>\`<span class="xml"><span class="tag">&lt;/<span class="name">code</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><code>强调</code><br><code>`</code></p><div class="note info flat"><p>想打出 <code>`</code>(反引号)需要转义符号<code>\</code>和<code>&lt;code&gt;&lt;/code&gt;</code>标签</p></div><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&gt;引用</span><br><span class="line">&gt;&gt;二级引用</span><br><span class="line">&gt;&gt;&gt;三级引用    </span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;重新回到二级</span><br><span class="line">&gt;&gt;&gt;三级</span><br><span class="line">注意看这一行</span><br><span class="line"></span><br><span class="line">这一行才结束引用</span><br></pre></td></tr></table></figure><blockquote><p>引用</p><blockquote><p>二级引用</p><blockquote><p>三级引用    </p></blockquote><p>重新回到二级</p><blockquote><p>三级<br>注意看这一行</p></blockquote></blockquote></blockquote><p>这一行才结束引用</p><div class="note danger flat"><p>在引用的嵌套中，引用的空列依然会延续，例如‘注意这一行’依旧是在三级引用之中。引用完毕要空一行才能结束引用，例如‘这一行才结束’才会退出引用。<br>更有注意的是空列如果缺少“&gt;&gt;&gt;”会出现断层，如下</p></div><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&gt;引用</span><br><span class="line">&gt;&gt;二级引用   </span><br><span class="line"></span><br><span class="line">&gt;重新回到一级</span><br></pre></td></tr></table></figure><blockquote><p>引用</p><blockquote><p>二级引用   </p></blockquote></blockquote><blockquote><p>重新回到一级</p></blockquote><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">列1 |列2 |列3</span><br><span class="line">:-----|:----:|---:</span><br><span class="line">左对齐|居中|右对齐</span><br><span class="line">12345|1234|123</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">列1</th><th align="center">列2</th><th align="right">列3</th></tr></thead><tbody><tr><td align="left">左对齐</td><td align="center">居中</td><td align="right">右对齐</td></tr></tbody></table><h2 id="代码框"><a href="#代码框" class="headerlink" title="代码框"></a>代码框</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">```code</span></span><br><span class="line"><span class="code">$ hexo clean</span></span><br><span class="line"><span class="code">```     第一行的code可以用其他代替</span></span><br></pre></td></tr></table></figure><h2 id="多媒体插入"><a href="#多媒体插入" class="headerlink" title="多媒体插入"></a>多媒体插入</h2><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">链接</span>](<span class="link"></span>)</span><br><span class="line">[<span class="string">百度</span>](<span class="link">https://baidu.com</span>)</span><br></pre></td></tr></table></figure><p><a href="">链接</a><br><a href="https://baidu.com/">百度</a></p><h3 id="图片："><a href="#图片：" class="headerlink" title="图片："></a>图片：</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">猫</span>](<span class="link">https://i.loli.net/2020/10/26/EXkGBjdlyF3QaKD.png</span>)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2020/10/26/EXkGBjdlyF3QaKD.png" alt="猫"></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 列表1</span><br><span class="line"><span class="bullet">*</span> 列表2</span><br><span class="line"><span class="bullet"> *</span> 列表2-1</span><br></pre></td></tr></table></figure><ul><li>列表1</li><li>列表2<ul><li>列表2-1</li></ul></li></ul><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 我是一级序列</span><br><span class="line"><span class="bullet">5.</span> 我是一级序列 </span><br><span class="line"><span class="bullet"> 3.</span> 我是二级序列</span><br><span class="line"><span class="bullet"> 7.</span> 我是二级序列</span><br><span class="line"><span class="bullet">1.</span> 我是一级序列</span><br><span class="line"><span class="bullet"> 1.</span> 我是二级序列 </span><br><span class="line"><span class="bullet">   9.</span> 缩进仍然二级序列 </span><br></pre></td></tr></table></figure><ol><li>我是一级序列</li><li>我是一级序列 <ol start="3"><li>我是二级序列</li><li>我是二级序列</li></ol></li><li>我是一级序列<ol><li>我是二级序列 </li><li>缩进仍然二级序列 </li></ol></li></ol><p><strong>数字无所谓的，好像只有两层序列结构</strong></p><h1 id="基于hexo的非严格意义写法"><a href="#基于hexo的非严格意义写法" class="headerlink" title="基于hexo的非严格意义写法"></a>基于hexo的非严格意义写法</h1><blockquote><p><strong>（部分只适用于butterfly主题）,具体参数详见<a href="https://demo.jerryc.me/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89">butterfly作者文档</a></strong></p></blockquote><ul><li><p>Hide Tag：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% hideBlock display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button button--animated" style="background-color: bg;color: color">display    </button><span class="hide-content"><p>content</p></span></div></li><li><p>Button：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% btn [url],[text],[icon],[color] [style] [layout] [position] [size] %&#125;</span><br></pre></td></tr></table></figure><a class="btn-beautify button--animated [color] [style] [layout] [position] [size]" href="/%5Burl%5D"   title="[text]"><i class="[icon] fa-fw"></i><span>[text]</span></a></li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">[url]     :</td><td align="left">链接</td></tr><tr><td align="left">[text]    :</td><td align="left">文本</td></tr><tr><td align="left">[icon]    :</td><td align="left">[可选] 图标</td></tr><tr><td align="left">[color]   :</td><td align="left">[可选] 背景顔色(默认style时）字体和边框颜色(outline时)—（default/blue/pink/red/purple/orange/green）</td></tr><tr><td align="left">[style]   :</td><td align="left">[可选] 样式 默认实心（outline//不填）</td></tr><tr><td align="left">[layout]  :</td><td align="left">[可选] 布局 默认为line（block//不填）</td></tr><tr><td align="left">[position]:</td><td align="left">[可选] 位置 前提是设置了layout为block 默认在左（center/right/不填）</td></tr><tr><td align="left">[size]    :</td><td align="left">larger/不填</td></tr></tbody></table><ul><li>Text Tab：<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tabs %&#125;</span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- tab 第一个Tab --&gt;</span></span></span><br><span class="line"><span class="strong">**tab名字为第一个Tab**</span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- tab @fab fa-apple-pay --&gt;</span></span></span><br><span class="line"><span class="strong">**只有图标 没有Tab名字**</span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- tab 炸弹@fas fa-bomb --&gt;</span></span></span><br><span class="line"><span class="strong">**名字+icon**</span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">第一个Tab</button></li><li class="tab"><button type="button" data-href="#-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button></li><li class="tab"><button type="button" data-href="#-3"><i class="fas fa-bomb"></i>炸弹</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p><strong>tab名字为第一个Tab</strong></p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><p><strong>只有图标 没有Tab名字</strong></p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><p><strong>名字+icon</strong></p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div></li></ul><ul><li>Notes:<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note default flat  %&#125; </span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- class： default / primary / success / info / warning / danger --&gt;</span></span></span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li></ul><div class="note default flat"><p>这是default </p></div><div class="note primary flat"><p>这是primary</p></div><div class="note success flat"><p>这是success</p></div><div class="note info flat"><p>这是info</p></div><div class="note warning flat"><p>这是warning </p></div><div class="note danger flat"><p>这是danger</p></div>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> 萌新 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建纯小白教学——基于hexo+GitHub搭建</title>
      <link href="2020/10/25/blog_guide/"/>
      <url>2020/10/25/blog_guide/</url>
      
        <content type="html"><![CDATA[<div class="note warning flat"><!-- class： default / primary / success / info / warning / danger --><ol><li>此篇教程适用于想搭建博客但没有基础的小白，只要你会百度和下载安装就行了，新手教程，大佬勿喷。</li><li>复制/输入代码时请检查一下内容是否正确（中英文输入法/空格）。</li></ol></div><h1 id="准备安装软件"><a href="#准备安装软件" class="headerlink" title="准备安装软件"></a>准备安装软件</h1><div class="note default flat"><p>点击即可跳转到下载链接,如果下载缓慢建议用迅雷或者自行下载。 遇到问题要<a href="https://baidu.com/">百度</a></p></div><p><code>安装看不懂的话可以直接点下一步就行了，均采用默认安装。</code></p><ol><li><a href="https://nodejs.org/dist/v12.19.0/node-v12.19.0-x64.msi"><strong>Node.js</strong></a></li><li><a href="https://github.com/git-for-windows/git/releases/download/v2.29.1.windows.1/Git-2.29.1-64-bit.exe"><strong>Git</strong></a></li></ol><h1 id="创建并连接仓库"><a href="#创建并连接仓库" class="headerlink" title="创建并连接仓库"></a>创建并连接仓库</h1><h2 id="注册github"><a href="#注册github" class="headerlink" title="注册github"></a>注册github</h2><p><strong>Github：<a href="https://github.com/">https://github.com/</a></strong> <code>注册登录,看不懂英语的可以用浏览器翻译</code> </p><h2 id="创建repository"><a href="#创建repository" class="headerlink" title="创建repository"></a>创建repository</h2><p>注册登录后点击右上角的<code>+</code>号，选择<code>New repository</code>。填写<code>Repository name</code>应该保持和前面的<code>Owner</code>一致，填进去的是<code>XXX.github.io</code>，例如你的用户名是<code>ABC</code>，那么填入<code>ABC.github.io</code>，点击<code>creat repository</code>。</p><h2 id="配置SSH-key"><a href="#配置SSH-key" class="headerlink" title="配置SSH key"></a>配置SSH key</h2><p>ssh keys就是一把钥匙，用来使本地git项目与github联系</p><ol><li>检查SSH key的设置<br>首先要检查自己电脑上现有的 SSH key：<br>右键桌面-选择git bash here（要复制粘贴的话，在git里面点右键-paste）<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd ~&#x2F;.ssh</span><br></pre></td></tr></table></figure>如果显示“<code>No such file or directory</code>”，说明这是你第一次使用 git。</li><li>生成新的 SSH Key：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;填写你的邮箱地址&quot;</span><br></pre></td></tr></table></figure>然后会显示：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;填写你的邮箱地址&quot;</span><br><span class="line">Generating public&#x2F;private rsa key pair.</span><br><span class="line">Enter file in which to save the key (&#x2F;Users&#x2F;your_user_directory&#x2F;.ssh&#x2F;id_rsa):</span><br></pre></td></tr></table></figure>看到这里直接回车就好了。<div class="note warning flat"><!-- class： default / primary / success / info / warning / danger --><p>1.这里的邮箱地址，输入注册 Github 的邮箱地址<br>2.「-C」的是大写的「C」</p></div>然后系统会要你输入密码：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Enter passphrase (empty for no passphrase):&lt;设置密码&gt;</span><br><span class="line">Enter same passphrase again:&lt;再次输入密码&gt;</span><br></pre></td></tr></table></figure>这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入。这个设置是防止别人往你的项目里提交内容。<br><code>建议直接回车不输入。注意：输入密码的时候没有输入痕迹的，不要以为什么也没有输入。</code><br>最后看到一个RSA 2048和SHA256的框框，就说明成功了。</li><li>在<code>c:/用户(或者user)/Administrator/.ssh</code>找到<code>id_rsa.pub</code>文件，如果没有点击左上角的<code>查看</code>，勾选<code>文件扩展名</code>和<code>隐藏的项目</code><br>右键这个<code>文件-打开方式-记事本</code>，然后全选复制。<br>回到github，点右上角头像-settings-左边栏选择<code>SSH and GPG keys</code>-右上绿色按钮<code>New SSH key</code>。<br>然后title随便写，key里面粘贴刚刚复制的，然后<code>Add SSH key</code>。</li><li>测试<br>右键桌面-git bash here，然后输入完整代码：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>如果反馈<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The authenticity of host &#39;GitHub.com (207.97.227.239)&#39; can&#39;t be established.</span><br><span class="line">RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span><br><span class="line">Are you sure you want to continue connecting (yes&#x2F;no)</span><br></pre></td></tr></table></figure>输入yes 然后回车 如果你刚刚设置了密码，现在输入密码：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Enter passphrase for key &#39;&#x2F;c&#x2F;Users&#x2F;lenovo&#x2F;.ssh&#x2F;id_rsa&#39;:</span><br></pre></td></tr></table></figure></li><li>设置用户信息<br>现在已经可以通过 SSH 链接到 GitHub 啦!当然还需要完善一些个人信息:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;输入注册时的用户名&quot;</span><br><span class="line">$ git config --global user.email  &quot;输入注册时的邮箱&quot;</span><br></pre></td></tr></table></figure>GitHub 也是用这些信息来做权限的处理，输入的代码进行个人信息的设置，把名称和邮箱替换成你自己的，名字必须是你的真名，而不是GitHub的昵称。<br><code>SSH Key配置成功！本机已成功连接到 github。</code>如果有问题请检查之前的步骤，或者<a href="https://baidu.com/">百度</a>。</li></ol><h1 id="搭建Hexo博客"><a href="#搭建Hexo博客" class="headerlink" title="搭建Hexo博客"></a>搭建Hexo博客</h1><p>在桌面右键git bash here，利用npm指令安装hexo</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo</span><br></pre></td></tr></table></figure><ol><li><p>创建一个用来放博客项目的文件夹（你随便找个位置）<br>安装完成后，关掉前面那个 Git Bash 窗口。在本地创建一个与刚刚创建仓库名字一样的文件夹（如<code>ABC.github.io</code>），进入文件夹点右键，选择 Git bash here。</p><div class="note warning flat"><!-- class： default / primary / success / info / warning / danger --><p><code>在进行博客搭建工作时，每次使用命令都要在这个文件夹里面下。</code></p></div><p>执行下面的指令，Hexo就会自动在这个文件夹建立独立博客所需要的所有文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure></li><li><p>安装依赖包<br>由于node下载第三方依赖包是从国外服务器下载，虽然没有被墙，但是下载的速度是非常的缓慢且有可能会出现异常。<br>所以为了提高效率，我们还是把npm的镜像源替换成淘宝的镜像源。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>然后检查是否修改成功</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm config get registry</span><br></pre></td></tr></table></figure><p>如果显示<code>https://registry.npm.taobao.org</code>说明成功，这下可以开始安装依赖包了。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure></li><li><p>确保git部署</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p>本地查看<br>现在已经搭建好本地的Hexo博客了，执行完下面的命令就可以到浏览器输入<code>localhost:4000</code>查看到啦，git不要关闭。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><p>hexo g 每次进行相应改动都要hexo g 生成一下，然后hexo s 启动服务预览，上述代码合并执行了。</p></li><li><p>用Hexo克隆主题（选择你喜欢的主题啦）<br>之前执行完 hexo init 命令后会给一个默认的主题：<code>landscape</code><br>你可以到官网找你喜欢的主题进行下载，<a href="https://www.zhihu.com/question/24422335/answer/46357100">知乎:有哪些好看的Hexo主题</a><br>找到它所在的Github Repository（至于怎么下载可以看看别人的文档，里面会有说明如何安装和使用的，或者直接<a href="https://baidu.com/">百度</a>）<br>有些主题甚至可以直接<code>npm i hexo-theme-XXXX</code>下载下来的，保存在你文件的<code>theme</code>文件夹里面</p></li><li><p>修改整站配置文件<br>打开刚刚创建的XXX.github.io文件夹，里面有个<code>_config.yml</code>文件，用记事本打开修改相关的属性</p><div class="note info flat"><p>后面所说的打开均是右键-打开方式-以记事本打开</p></div><p>一般都有注释，#后面的都是注释，不影响内容，比如：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site 站点</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">CarpeDiem</span>  <span class="comment">#主标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;&#x27;</span>  <span class="comment">#副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;晚来天欲雪，能饮一杯无？&#x27;</span>  <span class="comment">#博客描述</span></span><br><span class="line"><span class="attr">keywords:</span>     <span class="comment">#关键字</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Jesse_Chang</span>   <span class="comment">#博主</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span>    <span class="comment">#语言</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span>    <span class="comment">#时区</span></span><br><span class="line"><span class="string">......</span></span><br></pre></td></tr></table></figure><p><code>到此位置公共部分基本就完成了，剩下7-9的就是主题和自己的博客美化了，就大概说一下，如果感兴趣的可以继续研究。不想管的直接可以跳转到下一部分————将博客部署到Github</code></p></li><li><p>启用新下载的主题<br>首先在刚打开的的<code>_config.yml</code>文件中，（CTRL+F)查找到<code># Extensions</code>，把下面的<strong>theme</strong>：<code>landscape</code>修改为刚刚下载下来的主题名</p></li><li><p>更新主题<br><code>git bash</code>里执行(在博客项目的文件夹里面执行)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd themes&#x2F;主题名</span><br><span class="line">$ git pull</span><br></pre></td></tr></table></figure></li><li><p>本地查看调试<br>每次修改都要<code>hexo g</code>生成一下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo g #生成</span><br><span class="line">$ hexo s #启动本地服务，进行文章预览调试，退出服务用Ctrl+c</span><br></pre></td></tr></table></figure><p>浏览器输入<code>localhost：4000</code>预览效果</p></li></ol><h2 id="将博客部署到Github"><a href="#将博客部署到Github" class="headerlink" title="将博客部署到Github"></a>将博客部署到Github</h2><ol><li><p>复制SSH码<br>进入Github个人主页中，点击右上角头像<code>Your Repository</code>，选择之前创建的仓库<code>XXX.github.io</code>，点击上方绿色code按钮选择SSH，然后复制SSH码。</p></li><li><p>编辑整站配置文件<br>打开之前创建的<code>XXX.github.io</code>文件夹找到<code>_config.yml</code>,把刚刚复制的SSH码粘贴到(用CTRL+F搜索）<code>repository：</code>后面，<strong>别忘了冒号后要空一格</strong>。<br>然后改成这样子</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:你的用户名/你的用户名.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure></li><li><p>执行下列指令即可完成部署</p><div class="note info flat"><p>每次修改本地文件后，需要 hexo g 才能保存。如果修改过东西，可以用hexo clean先清理，每次使用命令时，都要在你的博客文件夹目录下，合起来一套指令。</p></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><div class="note info flat"><p>如果在配置 SSH key 时设置了密码，执行 hexo d 命令上传文件时需要输入密码进行确认，会出现一个小框框。</p></div><p>输入密码之后在浏览器输入：<code>你的用户名.github.io</code><br>如果得到你想要的效果，那么恭喜你，博客已经搭建好啦！<code>你的用户名.github.io</code>这个就是你的博客地址啦！如果搭建完了，记得留言给我，给你添加好友链接噢~</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> 萌新 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
